That file contains the documentation to build support for a different dvc,
using the dvc layer:

Conventions used in the document:
* #DVC# is used as placeholder for the dvc backend to implement

--------------------------------------------------------------------------------
* Base functions that are required for every supported dvc system
* That functions should be located in the #DVC#-dvc.el file
--------------------------------------------------------------------------------

When no function is provided, dvc-dvc-<postfix> is used instead.

- #DVC#-dvc-tree-root
   (defun #DVC#-dvc-tree-root (&optional location no-error)
     "Return the tree root for LOCATION, nil if not in a local tree.

   If NO-ERROR is non-nil, don't raise an error if LOCATION is not a
   #DVC# managed tree (but return nil)."

- #DVC#-dvc-log-edit-done
   (defun #DVC#-dvc-log-edit-done ()
     "Finish a commit for #DVC#."

- #DVC#-dvc-diff
   (defun #DVC#-dvc-diff ()
     "Shows the changes in the current #DVC# tree."

- #DVC#-dvc-log
   (defun #DVC#-dvc-log ()
     "Shows the changelog in the current #DVC# tree."

- #DVC#-dvc-command-version
   (defun #DVC#-dvc-command-version ()
     "Returns and/or shows the version identity string of backend command."


-----------------------------------------------------------------------------
* Revision API
-----------------------------------------------------------------------------

Definition
==========

DVC deals with several RCS, with different ways to designate a
revision. We define a unified way to designate a revision in lisp,
which we call revision identifiers, or rev-id:

REVISION-ID :: (<dvc> BACK-END-ID)
  ;; <dvc> is one of 'tla, 'bzr, 'xhg, ...

BACK-END-ID :: (revision BACK-END-REVISION)
  ;; An already commited revision
  ;; The way to specify it depends on the back-end.
             | (local-tree PATH)
  ;; Uncommited revision in the local tree PATH
             | (last-revision PATH NUM)
  ;; Last commited  revision in tree PATH if NUM = 1
  ;; Last but NUM-1 revision in tree PATH if NUM > 1
             | (previous-revision BACK-END-REVISION NUM)
  ;; Nth Ancestor of BACK-END-ID.

(probably we'll need a (head REMOTE-BRANCH) too)

PATH :: string

NUM :: number


For Xtla (tla and baz):

BACK-END-REVISION :: ("archive" "category" "branch" "version" "revision")
  ;; archive/category--branch--version--revision

For bzr:

BACK-END-REVISION :: (local "path" NUM)
                   | (remote "url" NUM)


For xhg:

TODO

Example
=======

(bzr (revision (local "/path/to/archive" 3)))
(baz (last-revision "/path/to/project" 1))
(baz (revision ("archive" "category" "branch" "version" "revision")))

Functions
=========

Based upon that, we define the functions:

dvc-revision-get-file-in-buffer: get the particular revision of a file
                                 in a buffer.
